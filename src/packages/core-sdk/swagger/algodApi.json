{
  "openapi": "3.0.1",
  "info": {
    "description": "API endpoint for algod operations.",
    "title": "Algod REST API.",
    "contact": {
      "name": "algorand",
      "url": "https://www.algorand.com/get-in-touch/contact",
      "email": "contact@algorand.com"
    },
    "version": "0.0.1"
  },
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Returns OK if healthy.",
        "operationId": "HealthCheck",
        "responses": {
          "200": {
            "description": "OK."
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Return metrics about algod functioning.",
        "operationId": "Metrics",
        "responses": {
          "200": {
            "description": "text with \\#-comments and key:value lines"
          },
          "404": {
            "description": "metrics were compiled out"
          }
        }
      }
    },
    "/genesis": {
      "get": {
        "description": "Returns the entire genesis file in json.",
        "tags": [
          "common"
        ],
        "summary": "Gets the genesis information.",
        "operationId": "GetGenesis",
        "responses": {
          "200": {
            "description": "The genesis file in json."
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/swagger.json": {
      "get": {
        "description": "Returns the entire swagger spec in json.",
        "tags": [
          "common"
        ],
        "summary": "Gets the current swagger spec.",
        "operationId": "SwaggerJSON",
        "responses": {
          "200": {
            "description": "The current swagger spec"
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/versions": {
      "get": {
        "description": "Retrieves the supported API versions, binary build versions, and genesis information.",
        "tags": [
          "common"
        ],
        "operationId": "GetVersion",
        "responses": {
          "200": {
            "$ref": "#/responses/VersionsResponse"
          }
        }
      }
    },
    "/v2/accounts/{address}": {
      "get": {
        "description": "Given a specific account public key, this call returns the accounts status, balance and spendable amounts",
        "summary": "Get account information.",
        "operationId": "AccountInformation",
        "parameters": [
          {
            "description": "An account public key",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "name": "exclude",
            "description": "When set to `all` will exclude asset holdings, application local state, created asset parameters, any created application parameters. Defaults to `none`.",
            "in": "query",
            "required": false
          },
          {
            "$ref": "#/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AccountResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid API Token"
          },
          "500": {
            "description": "Internal Error"
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "name": "address",
          "in": "path",
          "required": true
        },
        {
          "name": "format",
          "in": "query"
        }
      ]
    },
    "/v2/accounts/{address}/assets/{asset-id}": {
      "get": {
        "description": "Given a specific account public key and asset ID, this call returns the account's asset holding and asset parameters (if either exist). Asset parameters will only be returned if the provided address is the asset's creator.",
        "summary": "Get account information about a given asset.",
        "operationId": "AccountAssetInformation",
        "parameters": [
          {
            "description": "An account public key",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "description": "An asset identifier",
            "name": "asset-id",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AccountAssetResponse"
          },
          "400": {
            "description": "Malformed address or asset ID"
          },
          "401": {
            "description": "Invalid API Token"
          },
          "500": {
            "description": "Internal Error"
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "name": "address",
          "in": "path",
          "required": true
        },
        {
          "name": "format",
          "in": "query"
        }
      ]
    },
    "/v2/accounts/{address}/applications/{application-id}": {
      "get": {
        "description": "Given a specific account public key and application ID, this call returns the account's application local state and global state (AppLocalState and AppParams, if either exists). Global state will only be returned if the provided address is the application's creator.",
        "summary": "Get account information about a given app.",
        "operationId": "AccountApplicationInformation",
        "parameters": [
          {
            "description": "An account public key",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "description": "An application identifier",
            "name": "application-id",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AccountApplicationResponse"
          },
          "400": {
            "description": "Malformed address or application ID"
          },
          "401": {
            "description": "Invalid API Token"
          },
          "500": {
            "description": "Internal Error"
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "name": "address",
          "in": "path",
          "required": true
        },
        {
          "name": "format",
          "in": "query"
        }
      ]
    },
    "/v2/accounts/{address}/transactions/pending": {
      "get": {
        "description": "Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX = 0, returns all pending transactions.\n",
        "summary": "Get a list of unconfirmed transactions currently in the transaction pool by address.",
        "operationId": "GetPendingTransactionsByAddress",
        "parameters": [
          {
            "description": "An account public key",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/max"
          },
          {
            "$ref": "#/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PendingTransactionsResponse"
          },
          "400": {
            "description": "Max must be a non-negative integer"
            },
          "401": {
            "description": "Invalid API Token"
            },
          "500": {
            "description": "Internal Error"
            },
          "503": {
            "description": "Service Temporarily Unavailable"
            },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "name": "address",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/blocks/{round}": {
      "get": {
        "summary": "Get the block for the given round.",
        "operationId": "GetBlock",
        "parameters": [
          {
            "description": "The round from which to fetch block information.",
            "name": "round",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BlockResponse"
          },
          "400": {
            "description": "Bad Request - Non integer number"
            },
          "401": {
            "description": "Invalid API Token"
            },
          "404": {
            "description": "None existing block "
            },
          "500": {
            "description": "Internal Error"
            },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "name": "round",
          "in": "path",
          "required": true
        },
        {
          "name": "format",
          "in": "query"
        }
      ]
    },
    "/v2/blocks/{round}/transactions/{txid}/proof": {
      "get": {
        "summary": "Get a Merkle proof for a transaction in a block.",
        "operationId": "GetProof",
        "parameters": [
          {
            "description": "The round in which the transaction appears.",
            "name": "round",
            "in": "path",
            "required": true
          },
          {
            "description": "The transaction ID for which to generate a proof.",
            "name": "txid",
            "in": "path",
            "required": true
          },
          {
            "description": "The type of hash function used to create the proof, must be one of: \n* sha512_256 \n* sha256",
            "name": "hashtype",
            "in": "query",
            "required": false
          },
          {
            "$ref": "#/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProofResponse"
          },
          "400": {
            "description": "Malformed round number or transaction ID"
            },
          "401": {
            "description": "Invalid API token"
            },
          "404": {
            "description": "Non-existent block or transaction"
            },
          "500": {
            "description": "Internal error, including protocol not supporting Merkle proofs."
            },
          "default": {
            "description": "Unknown error"
          }
        }
      },
      "parameters": [
        {
          "name": "round",
          "in": "path",
          "required": true
        },
        {
          "name": "txid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/ledger/supply": {
      "get": {
        "summary": "Get the current supply reported by the ledger.",
        "operationId": "GetSupply",
        "responses": {
          "200": {
            "$ref": "#/responses/SupplyResponse"
          },
          "401": {
            "description": "Invalid API Token"
            },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/participation": {
      "get": {
        "tags": [
          "private"
        ],
        "description": "Return a list of participation keys",
        "summary": "Return a list of participation keys",
        "operationId": "GetParticipationKeys",
        "responses": {
          "200": {
            },
          "400": {
            "description": "Bad Request"
            },
          "401": {
            "description": "Invalid API Token"
            },
          "404": {
            "description": "Participation Key Not Found"
            },
          "500": {
            "description": "Internal Error"
            },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "post": {
        "tags": [
          "private"
        ],
        "summary": "Add a participation key to the node",
        "operationId": "AddParticipationKey",
        "parameters": [
          {
            "description": "The participation key to add to the node",
            "name": "participationkey",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PostParticipationResponse"
          },
          "400": {
            "description": "Bad Request"
            },
          "401": {
            "description": "Invalid API Token"
            },
          "404": {
            "description": "Participation Key Not Found"
            },
          "500": {
            "description": "Internal Error"
            },
          "503": {
            "description": "Service Temporarily Unavailable"
            },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/participation/{participation-id}": {
      "delete": {
        "tags": [
          "private"
        ],
        "description": "Delete a given participation key by ID",
        "summary": "Delete a given participation key by ID",
        "operationId": "DeleteParticipationKeyByID",
        "responses": {
          "200": {
            "description": "Participation key got deleted by ID"
          },
          "400": {
            "description": "Bad Request"
            },
          "401": {
            "description": "Invalid API Token"
            },
          "404": {
            "description": "Participation Key Not Found"
            },
          "500": {
            "description": "Internal Error"
            },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "get": {
        "tags": [
          "private"
        ],
        "description": "Given a participation ID, return information about that participation key",
        "summary": "Get participation key info given a participation ID",
        "operationId": "GetParticipationKeyByID",
        "responses": {
          "200": {
            },
          "400": {
            "description": "Bad Request"
            },
          "401": {
            "description": "Invalid API Token"
            },
          "404": {
            "description": "Participation Key Not Found"
            },
          "500": {
            "description": "Internal Error"
            },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "post": {
        "tags": [
          "private"
        ],
        "description": "Given a participation ID, append state proof keys to a particular set of participation keys",
        "parameters": [
          {
            "description": "The state proof keys to add to an existing participation ID",
            "name": "keymap",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "summary": "Append state proof keys to a participation key",
        "operationId": "AppendKeys",
        "responses": {
          "200": {
            },
          "400": {
            "description": "Bad Request"
            },
          "401": {
            "description": "Invalid API Token"
            },
          "404": {
            "description": "Participation Key Not Found"
            },
          "500": {
            "description": "Internal Error"
            },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "name": "participation-id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/shutdown": {
      "post": {
        "description": "Special management endpoint to shutdown the node. Optionally provide a timeout parameter to indicate that the node should begin shutting down after a number of seconds.",
        "tags": [
          "private"
        ],
        "operationId": "ShutdownNode",
        "parameters": [
          {
            "name": "timeout",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/v2/status": {
      "get": {
        "summary": "Gets the current node status.",
        "operationId": "GetStatus",
        "responses": {
          "200": {
            "$ref": "#/responses/NodeStatusResponse"
          },
          "401": {
            "description": "Invalid API Token"
            },
          "500": {
            "description": "Internal Error"
            },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/status/wait-for-block-after/{round}": {
      "get": {
        "description": "Waits for a block to appear after round {round} and returns the node's status at the time.",
        "summary": "Gets the node status after waiting for the given round.",
        "operationId": "WaitForBlock",
        "parameters": [
          {
            "description": "The round to wait until returning status",
            "name": "round",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/NodeStatusResponse"
          },
          "400": {
            "description": "Bad Request -- number must be non-negative integer "
            },
          "401": {
            "description": "Invalid API Token"
            },
          "500": {
            "description": "Internal Error"
            },
          "503": {
            "description": "Service Temporarily Unavailable"
            },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "name": "round",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/transactions": {
      "post": {
        "summary": "Broadcasts a raw transaction to the network.",
        "operationId": "RawTransaction",
        "parameters": [
          {
            "description": "The byte encoded signed transaction to broadcast to network",
            "name": "rawtxn",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PostTransactionsResponse"
          },
          "400": {
            "description": "Bad Request - Malformed Algorand transaction "
            },
          "401": {
            "description": "Invalid API Token"
            },
          "500": {
            "description": "Internal Error"
            },
          "503": {
            "description": "Service Temporarily Unavailable"
            },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/transactions/params": {
      "get": {
        "summary": "Get parameters for constructing a new transaction",
        "operationId": "TransactionParams",
        "responses": {
          "200": {
            "$ref": "#/responses/TransactionParametersResponse"
          },
          "401": {
            "description": "Invalid API Token"
            },
          "500": {
            "description": "Internal Error"
            },
          "503": {
            "description": "Service Temporarily Unavailable"
            },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/transactions/pending": {
      "get": {
        "description": "Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX = 0, returns all pending transactions.\n",
        "summary": "Get a list of unconfirmed transactions currently in the transaction pool.",
        "operationId": "GetPendingTransactions",
        "parameters": [
          {
            "$ref": "#/parameters/max"
          },
          {
            "$ref": "#/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PendingTransactionsResponse"
          },
          "401": {
            "description": "Invalid API Token"
            },
          "500": {
            "description": "Internal Error"
            },
          "503": {
            "description": "Service Temporarily Unavailable"
            },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/transactions/pending/{txid}": {
      "get": {
        "description": "Given a transaction ID of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed:\n- transaction committed (committed round \u003e 0)\n- transaction still in the pool (committed round = 0, pool error = \"\")\n- transaction removed from pool due to error (committed round = 0, pool error != \"\")\nOr the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error.\n",
        "summary": "Get a specific pending transaction.",
        "operationId": "PendingTransactionInformation",
        "parameters": [
          {
            "description": "A transaction ID",
            "name": "txid",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "Given a transaction ID of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed:\n- transaction committed (committed round \u003e 0)\n- transaction still in the pool (committed round = 0, pool error = \"\")\n- transaction removed from pool due to error (committed round = 0, pool error != \"\")\n\nOr the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error."
            },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid API Token"
            },
          "404": {
            "description": "Transaction Not Found"
            },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "name": "txid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/applications/{application-id}": {
      "get": {
        "description": "Given a application ID, it returns application information including creator, approval and clear programs, global and local schemas, and global state.",
        "summary": "Get application information.",
        "operationId": "GetApplicationByID",
        "parameters": [
          {
            "description": "An application identifier",
            "name": "application-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid API Token"
            },
          "404": {
            "description": "Application Not Found"
            },
          "500": {
            "description": "Internal Error"
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "name": "application-id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/assets/{asset-id}": {
      "get": {
        "description": "Given a asset ID, it returns asset information including creator, name, total supply and special addresses.",
        "summary": "Get asset information.",
        "operationId": "GetAssetByID",
        "parameters": [
          {
            "description": "An asset identifier",
            "name": "asset-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid API Token"
          },
          "404": {
            "description": "Application Not Found"
            },
          "500": {
            "description": "Internal Error"
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "name": "asset-id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/teal/compile": {
      "post": {
        "description": "Given TEAL source code in plain text, return base64 encoded program bytes and base32 SHA512_256 hash of program bytes (Address style). This endpoint is only enabled when a node's configuration file sets EnableDeveloperAPI to true.",
        "summary": "Compile TEAL source code to binary, produce its hash",
        "operationId": "TealCompile",
        "parameters": [
          {
            "description": "TEAL source code to be compiled",
            "name": "source",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          {
            "name": "sourcemap",
            "description": "When set to `true`, returns the source map of the program as a JSON. Defaults to `false`.",
            "in": "query"
            }
        ],
        "responses": {
          "200": {
          },
          "400": {
            "description": "Bad Request - Teal Compile Error"
            },
          "401": {
            "description": "Invalid API Token"
          },
          "404": {
            "description": "Developer API not enabled"
          },
          "500": {
            "description": "Internal Error"
            },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/teal/disassemble": {
      "post": {
        "description": "Given the program bytes, return the TEAL source code in plain text. This endpoint is only enabled when a node's configuration file sets EnableDeveloperAPI to true.",
        "summary": "Disassemble program bytes into the TEAL source code.",
        "operationId": "TealDisassemble",
        "parameters": [
          {
            "description": "TEAL program binary to be disassembled",
            "name": "source",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        ],
        "responses": {
          "200": {
            },
          "400": {
            "description": "Bad Request - Teal Compile Error"
            },
          "401": {
            "description": "Invalid API Token"
          },
          "404": {
            "description": "Developer API not enabled"
          },
          "500": {
            "description": "Internal Error"
            },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v2/catchup/{catchpoint}": {
      "post": {
        "tags": [
          "private"
        ],
        "description": "Given a catchpoint, it starts catching up to this catchpoint",
        "summary": "Starts a catchpoint catchup.",
        "operationId": "StartCatchup",
        "parameters": [
          {
            "$ref": "#/parameters/catchpoint"
          }
        ],
        "responses": {
          "200": {
            },
          "201": {
            },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid API Token"
          },
          "500": {
            "description": "Internal Error"
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "delete": {
        "tags": [
          "private"
        ],
        "description": "Given a catchpoint, it aborts catching up to this catchpoint",
        "summary": "Aborts a catchpoint catchup.",
        "operationId": "AbortCatchup",
        "parameters": [
          {
            "$ref": "#/parameters/catchpoint"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CatchpointAbortResponse"
          },
          "400": {
            "description": "Bad Request"
            },
          "401": {
            "description": "Invalid API Token"
          },
          "500": {
            "description": "Internal Error"
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      },
      "parameters": [
        {
          "name": "catchpoint",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v2/teal/dryrun": {
      "post": {
        "description": "Executes TEAL program(s) in context and returns debugging information about the execution. This endpoint is only enabled when a node's configuration file sets EnableDeveloperAPI to true.",
        "summary": "Provide debugging information for a transaction (or group).",
        "operationId": "TealDryrun",
        "parameters": [
          {
            "description": "Transaction (or group) and any accompanying state-simulation data.",
            "name": "request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DryrunRequest"
            }
          }
        ],
        "responses": {
          "200": {
            },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid API Token"
          },
          "404": {
            "description": "Developer API not enabled"
          },
          "500": {
            "description": "Internal Error"
            },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    }
  },
  "security": [
    {
      "api_key": []
    }
  ],
  "tags": [
    {
      "name": "private"
    }
  ]
}